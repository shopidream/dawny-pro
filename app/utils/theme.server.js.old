// app/utils/theme.server.js
import { authenticate } from "../shopify.server.js";
import {
  saveInstallationStatus,
  saveCSSHistory,
  getInstallationStatus,
  getCSSHistory,
  createHistoryItem
} from "./metafield.server.js";

// Dawn theme identification
const DAWN_THEME_IDENTIFIERS = {
  storeId: "796", // Official Dawn theme store ID
  names: ["dawn", "dawn copy", "dawn theme", "dawn - copy"], // Common Dawn theme names
  keywords: ["dawn"]
};

// Check if theme is compatible (Dawn-based)
function isDawnTheme(theme) {
  if (!theme) return false;
  
  const themeName = theme.name ? theme.name.toLowerCase().trim() : "";
  const themeStoreId = theme.themeStoreId ? theme.themeStoreId.toString() : "";
  
  // Check by official store ID (most reliable)
  if (themeStoreId === DAWN_THEME_IDENTIFIERS.storeId) {
    return true;
  }
  
  // Check by name patterns
  return DAWN_THEME_IDENTIFIERS.keywords.some(keyword => 
    themeName.includes(keyword.toLowerCase())
  );
}

// Get theme compatibility status
function getThemeCompatibility(theme) {
  const isCompatible = isDawnTheme(theme);
  
  return {
    compatible: isCompatible,
    reason: isCompatible 
      ? "Compatible with Dawn theme"
      : "Only Dawn-based themes are supported for optimal compatibility"
  };
}

// Get list of themes with compatibility check
export async function getThemes(request) {
  console.log('=== getThemes function called ===');
  
  try {
    console.log('=== Fetching real themes from Shopify ===');
    
    // Step 1: Authentication check
    console.log('üîê Step 1: Authenticating with Shopify...');
    const { admin } = await authenticate.admin(request);
    console.log('‚úÖ Authentication successful');
    
    // Step 2: GraphQL query execution
    console.log('üìä Step 2: Executing GraphQL query...');
    const graphqlQuery = `
      query getThemes {
        themes(first: 50) {
          nodes {
            id
            name
            role
            createdAt
            updatedAt
            themeStoreId
            processing
          }
        }
      }
    `;
    console.log('GraphQL Query:', graphqlQuery.trim());
    
    const response = await admin.graphql(graphqlQuery);
    console.log('‚úÖ GraphQL request sent successfully');
    console.log('Response status:', response.status);
    console.log('Response ok:', response.ok);
    
    // Step 3: Response parsing
    console.log('üìù Step 3: Parsing GraphQL response...');
    const data = await response.json();
    console.log('‚úÖ Response parsed to JSON');
    
    // Step 4: Error checking
    console.log('üîç Step 4: Checking for GraphQL errors...');
    if (data.errors) {
      console.error('‚ùå GraphQL errors found:', JSON.stringify(data.errors, null, 2));
      throw new Error(`GraphQL error: ${data.errors[0].message}`);
    }
    console.log('‚úÖ No GraphQL errors detected');
    
    // Step 5: Data validation
    console.log('‚úÖ Step 5: Validating response data...');
    console.log('Full response data:', JSON.stringify(data, null, 2));
    
    const rawThemes = data.data?.themes?.nodes || [];
    console.log(`‚úÖ Found ${rawThemes.length} total themes in store`);
    
    if (rawThemes.length === 0) {
      console.warn('‚ö†Ô∏è No themes found in store - this might indicate a permissions issue');
    }
    
    // Process themes with compatibility information
    const processedThemes = rawThemes.map(theme => {
      const compatibility = getThemeCompatibility(theme);
      const roleText = theme.role === 'MAIN' ? 'Published' : 
                      theme.role === 'UNPUBLISHED' ? 'Unpublished' : 'Development';
      
      console.log(`- ${theme.name} (${roleText}) - ${compatibility.compatible ? 'Compatible' : 'Incompatible'}`);
      
      return {
        ...theme,
        compatibility,
        roleText,
        isPublished: theme.role === 'MAIN'
      };
    });
    
    // Separate compatible and incompatible themes
    const compatibleThemes = processedThemes.filter(theme => theme.compatibility.compatible);
    const incompatibleThemes = processedThemes.filter(theme => !theme.compatibility.compatible);
    
    console.log(`‚úÖ Compatible themes: ${compatibleThemes.length}`);
    console.log(`‚úÖ Incompatible themes: ${incompatibleThemes.length}`);
    
    return {
      success: true,
      themes: processedThemes,
      compatibleThemes,
      incompatibleThemes,
      stats: {
        total: rawThemes.length,
        compatible: compatibleThemes.length,
        incompatible: incompatibleThemes.length,
        published: processedThemes.filter(t => t.isPublished).length
      }
    };
    
  } catch (error) {
    console.error('\n‚ùå ===== DETAILED ERROR ANALYSIS =====');
    console.error('Error Type:', error.constructor.name);
    console.error('Error Message:', error.message);
    console.error('Error Code:', error.code || 'No error code');
    
    // Authentication errors
    if (error.message.includes('authentication') || 
        error.message.includes('token') || 
        error.message.includes('unauthorized') ||
        error.message.includes('401')) {
      console.error('üîê AUTHENTICATION ERROR DETECTED');
      console.error('- Check if Shopify app is properly installed');
      console.error('- Verify OAuth token is valid');
      console.error('- Confirm app permissions include theme access');
    }
    
    // Permission errors
    if (error.message.includes('permission') || 
        error.message.includes('forbidden') || 
        error.message.includes('403')) {
      console.error('üö´ PERMISSION ERROR DETECTED');
      console.error('- App may not have theme read permissions');
      console.error('- Check Shopify app scopes configuration');
    }
    
    // GraphQL schema errors
    if (error.message.includes('GraphQL') || 
        error.message.includes('schema') || 
        error.message.includes('query') ||
        error.message.includes('field')) {
      console.error('üìä GRAPHQL SCHEMA ERROR DETECTED');
      console.error('- Query structure may be incorrect for current API version');
      console.error('- Check if themes field is available in your API version');
    }
    
    // Network errors
    if (error.message.includes('network') || 
        error.message.includes('timeout') || 
        error.message.includes('fetch')) {
      console.error('üåê NETWORK ERROR DETECTED');
      console.error('- Check internet connection');
      console.error('- Shopify API may be temporarily unavailable');
    }
    
    // HTTP response errors
    if (error.response) {
      console.error('üåê HTTP RESPONSE ERROR:');
      console.error('Status:', error.response.status);
      console.error('Status Text:', error.response.statusText);
      console.error('Headers:', error.response.headers);
    }
    
    // Stack trace for debugging
    console.error('üìö Stack Trace:');
    console.error(error.stack);
    
    // Full error object
    console.error('üîç Full Error Object:');
    console.error(JSON.stringify(error, Object.getOwnPropertyNames(error), 2));
    
    console.error('===== END ERROR ANALYSIS =====\n');
    
    // Fallback to mock data with compatibility info
    console.log('üîÑ Using fallback mock data with compatibility checks...');
    
    const mockThemes = [
      {
        id: "gid://shopify/Theme/12345",
        name: "Dawn",
        role: "MAIN",
        themeStoreId: "796",
        createdAt: "2024-01-01T00:00:00Z",
        updatedAt: "2024-06-01T00:00:00Z",
        processing: false
      },
      {
        id: "gid://shopify/Theme/67890",
        name: "Dawn - Copy",
        role: "UNPUBLISHED", 
        themeStoreId: "796",
        createdAt: "2024-02-01T00:00:00Z",
        updatedAt: "2024-06-01T00:00:00Z",
        processing: false
      },
      {
        id: "gid://shopify/Theme/11111",
        name: "Vintage",
        role: "UNPUBLISHED",
        themeStoreId: "456",
        createdAt: "2024-03-01T00:00:00Z",
        updatedAt: "2024-06-01T00:00:00Z",
        processing: false
      }
    ];
    
    const processedMockThemes = mockThemes.map(theme => {
      const compatibility = getThemeCompatibility(theme);
      const roleText = theme.role === 'MAIN' ? 'Published' : 
                      theme.role === 'UNPUBLISHED' ? 'Unpublished' : 'Development';
      
      return {
        ...theme,
        compatibility,
        roleText,
        isPublished: theme.role === 'MAIN'
      };
    });
    
    return {
      success: true,
      themes: processedMockThemes,
      compatibleThemes: processedMockThemes.filter(t => t.compatibility.compatible),
      incompatibleThemes: processedMockThemes.filter(t => !t.compatibility.compatible),
      stats: {
        total: mockThemes.length,
        compatible: processedMockThemes.filter(t => t.compatibility.compatible).length,
        incompatible: processedMockThemes.filter(t => !t.compatibility.compatible).length,
        published: processedMockThemes.filter(t => t.isPublished).length
      },
      usingFallback: true,
      errorDetails: {
        type: error.constructor.name,
        message: error.message,
        code: error.code || null
      }
    };
  }
}

// Real CSS upload function with metafield logging
export async function uploadCSSToTheme(request, themeId, cssContent) {
  try {
    console.log(`\nüì§ Starting REAL CSS upload to theme ${themeId}...`);
    
    const contentSize = cssContent ? cssContent.length : 0;
    console.log(`CSS content size: ${contentSize} characters`);
    
    if (!cssContent) {
      throw new Error('CSS content is empty or undefined');
    }
    
    // Real Shopify API call for CSS upload
    console.log('üîê Authenticating for CSS upload...');
    const { admin } = await authenticate.admin(request);
    
    console.log('üì§ Uploading CSS file to Shopify theme assets...');
    const response = await admin.rest.resources.Asset.save({
      session: admin.session,
      theme_id: themeId.replace('gid://shopify/Theme/', ''),
      key: 'assets/style-luxury-v1.css',
      value: cssContent
    });
    
    console.log('‚úÖ CSS upload completed successfully');
    console.log('File: style-luxury-v1.css uploaded to assets/ folder');
    
    // Log to metafield history
    const historyItem = createHistoryItem('upload_css', {
      cssFileName: 'style-luxury-v1.css',
      fileSize: contentSize,
      themeId: themeId,
      themeName: 'Current Theme',
      success: true
    });
    
    await saveCSSHistory(request, historyItem);
    
    return {
      success: true,
      message: 'CSS file (style-luxury-v1.css) uploaded successfully to theme assets folder.',
      assetId: response.id
    };
  } catch (error) {
    console.error('‚ùå CSS upload error:', error.message);
    console.error('Full CSS upload error:', error);
    
    // Log error to metafield history
    const historyItem = createHistoryItem('upload_css', {
      cssFileName: 'style-luxury-v1.css',
      themeId: themeId,
      themeName: 'Current Theme',
      success: false,
      error: error.message
    });
    
    await saveCSSHistory(request, historyItem);
    
    return {
      success: false,
      error: error.message
    };
  }
}

// Real section upload function with metafield logging
export async function uploadSectionToTheme(request, themeId, sectionContent) {
  try {
    console.log(`\nüì§ Starting REAL section upload to theme ${themeId}...`);
    
    const contentSize = sectionContent ? sectionContent.length : 0;
    console.log(`Section content size: ${contentSize} characters`);
    
    if (!sectionContent) {
      throw new Error('Section content is empty or undefined');
    }
    
    // Real Shopify API call for section upload
    console.log('üîê Authenticating for section upload...');
    const { admin } = await authenticate.admin(request);
    
    console.log('üì§ Uploading section file to Shopify theme sections...');
    const response = await admin.rest.resources.Asset.save({
      session: admin.session,
      theme_id: themeId.replace('gid://shopify/Theme/', ''),
      key: 'sections/shoppable-video.liquid',
      value: sectionContent
    });
    
    console.log('‚úÖ Section upload completed successfully');
    console.log('File: shoppable-video.liquid uploaded to sections/ folder');
    
    // Log to metafield history
    const historyItem = createHistoryItem('upload_section', {
      sectionFileName: 'shoppable-video.liquid',
      fileSize: contentSize,
      themeId: themeId,
      themeName: 'Current Theme',
      success: true
    });
    
    await saveCSSHistory(request, historyItem);
    
    return {
      success: true,
      message: 'Section file (shoppable-video.liquid) uploaded successfully to theme sections folder.',
      assetId: response.id
    };
  } catch (error) {
    console.error('‚ùå Section upload error:', error.message);
    console.error('Full section upload error:', error);
    
    // Log error to metafield history
    const historyItem = createHistoryItem('upload_section', {
      sectionFileName: 'shoppable-video.liquid',
      themeId: themeId,
      themeName: 'Current Theme',
      success: false,
      error: error.message
    });
    
    await saveCSSHistory(request, historyItem);
    
    return {
      success: false,
      error: error.message
    };
  }
}

// Real CSS link addition to theme.liquid with metafield logging
export async function addCSSToThemeLayout(request, themeId) {
  try {
    console.log(`\nüîó Starting REAL CSS link addition to theme ${themeId}...`);
    
    // Real Shopify API call to get theme.liquid
    console.log('üîê Authenticating for theme.liquid modification...');
    const { admin } = await authenticate.admin(request);
    
    console.log('üì• Downloading current theme.liquid...');
    const themeIdNumber = themeId.replace('gid://shopify/Theme/', '');
    
    // Get current theme.liquid content
    const currentAsset = await admin.rest.resources.Asset.find({
      session: admin.session,
      theme_id: themeIdNumber,
      key: 'layout/theme.liquid'
    });
    
    let themeContent = currentAsset.value;
    console.log(`Current theme.liquid size: ${themeContent.length} characters`);
    
    // Check if CSS link already exists
    const cssLinkTag = '{{ "style-luxury-v1.css" | asset_url | stylesheet_tag }}';
    
    if (themeContent.includes(cssLinkTag)) {
      console.log('‚ÑπÔ∏è CSS link already exists in theme.liquid');
      return {
        success: true,
        message: 'CSS stylesheet link already exists in theme.liquid header.'
      };
    }
    
    // Add CSS link to head section
    const headEndTag = '</head>';
    if (themeContent.includes(headEndTag)) {
      themeContent = themeContent.replace(
        headEndTag,
        `  ${cssLinkTag}\n${headEndTag}`
      );
      
      console.log('üì§ Uploading modified theme.liquid...');
      await admin.rest.resources.Asset.save({
        session: admin.session,
        theme_id: themeIdNumber,
        key: 'layout/theme.liquid',
        value: themeContent
      });
      
      console.log('‚úÖ CSS link added to theme.liquid successfully');
      console.log(`Added: ${cssLinkTag} to theme.liquid header`);
      
      return {
        success: true,
        message: 'CSS stylesheet link (style-luxury-v1.css) added to theme.liquid header.'
      };
    } else {
      throw new Error('Could not find </head> tag in theme.liquid');
    }
    
  } catch (error) {
    console.error('‚ùå CSS link addition error:', error.message);
    console.error('Full CSS link error:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

// Complete theme installation process with real API calls and metafield logging
export async function installThemePackage(request, themeId, cssContent, sectionContent, selectedTheme = null) {
  console.log(`\n=== STARTING REAL THEME INSTALLATION ===`);
  console.log(`Theme ID: ${themeId}`);
  
  try {
    // Pre-installation validation
    if (selectedTheme && !selectedTheme.compatibility.compatible) {
      throw new Error(`Installation failed: ${selectedTheme.compatibility.reason}`);
    }
    
    if (selectedTheme && selectedTheme.isPublished) {
      console.log('‚ö†Ô∏è WARNING: Installing to published theme');
    }
    
    const cssSize = cssContent ? cssContent.length : 0;
    const sectionSize = sectionContent ? sectionContent.length : 0;
    
    console.log(`CSS Content (style-luxury-v1.css): ${cssSize > 0 ? 'Ready' : 'Missing'} (${cssSize} chars)`);
    console.log(`Section Content (shoppable-video.liquid): ${sectionSize > 0 ? 'Ready' : 'Missing'} (${sectionSize} chars)`);
    
    if (!cssContent || !sectionContent) {
      throw new Error('Required files are missing. Please ensure style-luxury-v1.css and shoppable-video.liquid files are uploaded.');
    }
    
    // Step 1: Upload CSS file
    console.log('\n--- Step 1/4: Uploading style-luxury-v1.css ---');
    const cssResult = await uploadCSSToTheme(request, themeId, cssContent);
    if (!cssResult.success) {
      throw new Error(`CSS upload failed: ${cssResult.error}`);
    }
    
    // Step 2: Upload section file
    console.log('\n--- Step 2/4: Uploading shoppable-video.liquid ---');
    const sectionResult = await uploadSectionToTheme(request, themeId, sectionContent);
    if (!sectionResult.success) {
      throw new Error(`Section upload failed: ${sectionResult.error}`);
    }
    
    // Step 3: Add CSS link to theme
    console.log('\n--- Step 3/4: Adding CSS link to theme.liquid ---');
    const cssLinkResult = await addCSSToThemeLayout(request, themeId);
    if (!cssLinkResult.success) {
      throw new Error(`CSS link addition failed: ${cssLinkResult.error}`);
    }
    
    // Step 4: Save installation status to metafield
    console.log('\n--- Step 4/4: Saving installation status ---');
    const statusResult = await saveInstallationStatus(request, {
      isInstalled: true,
      installedAt: new Date().toISOString(),
      cssFileName: 'style-luxury-v1.css',
      fileSize: cssSize,
      themeId: themeId,
      themeName: selectedTheme ? selectedTheme.name : 'Selected Theme',
      installMethod: 'theme_api'
    });
    
    // Log complete installation to history
    const historyItem = createHistoryItem('install_complete', {
      cssFileName: 'style-luxury-v1.css',
      sectionFileName: 'shoppable-video.liquid',
      fileSize: cssSize + sectionSize,
      themeId: themeId,
      themeName: selectedTheme ? selectedTheme.name : 'Selected Theme',
      success: true
    });
    
    await saveCSSHistory(request, historyItem);
    
    console.log(`\nüéâ REAL INSTALLATION COMPLETED SUCCESSFULLY!`);
    console.log(`Theme ${selectedTheme ? selectedTheme.name : themeId} now has Dawny Pro luxury package installed!`);
    
    return {
      success: true,
      message: 'Theme package installed successfully! Your theme now includes luxury CSS styles and shoppable video sections.',
      details: {
        css: cssResult.message,
        section: sectionResult.message,
        cssLink: cssLinkResult.message,
        status: 'Installation status saved to metafields',
        themeName: selectedTheme ? selectedTheme.name : 'Selected theme',
        assetIds: {
          css: cssResult.assetId,
          section: sectionResult.assetId
        }
      }
    };
  } catch (error) {
    console.error('\n‚ùå REAL INSTALLATION FAILED');
    console.error('Error:', error.message);
    console.error('Full installation error:', error);
    
    // Log failed installation to history
    const historyItem = createHistoryItem('install_complete', {
      cssFileName: 'style-luxury-v1.css',
      sectionFileName: 'shoppable-video.liquid',
      themeId: themeId,
      themeName: selectedTheme ? selectedTheme.name : 'Selected Theme',
      success: false,
      error: error.message
    });
    
    await saveCSSHistory(request, historyItem);
    
    return {
      success: false,
      error: `Installation failed: ${error.message}`
    };
  }
}

// Get current installation info with metafield data
export async function getInstallationInfo(request) {
  try {
    const [status, history] = await Promise.all([
      getInstallationStatus(request),
      getCSSHistory(request)
    ]);

    return {
      currentStatus: status,
      history: history,
      hasInstallation: status && status.isInstalled
    };
  } catch (error) {
    console.error('‚ùå Failed to get installation info:', error);
    return {
      currentStatus: null,
      history: [],
      hasInstallation: false
    };
  }
}
